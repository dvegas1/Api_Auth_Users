import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'com.github.spotbugs' version '5.0.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.asciidoctor.jvm.pdf' version '3.3.2'
    id 'org.asciidoctor.jvm.gems' version '3.3.2'
    id 'signing'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'com.github.johnrengelman.processes' version '0.5.0'
    id 'org.owasp.dependencycheck' version '7.3.0'
    id "com.gorylenko.gradle-git-properties" version "2.4.0"
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.1.2"

}

ext {
    getGitSha = { return "${System.properties['BUILD_NUMBER'] ?: '0'}".replaceAll('\r', '').replaceAll('\n', '') }
    getGitBranch = { return "${System.properties['BRANCH_NAME'] ?: 'unknown'}".replaceAll('\r', '').replaceAll('\n', '') }
    junitJupiter = '5.8.2'
    log4j2Version = '2.17.2'
    springfoxVersion = '3.0.4'
    solution = 'coocentral-co'
    set('springCloudVersion', "2021.0.3")}

repositories {
    mavenLocal()
    mavenCentral()
}

group = 'com.microservice.api'
version = '1.0.0'
description = 'Microservices Auth Users'

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

dependencyCheck {
    failBuildOnCVSS = 11
    failOnError = true
    suppressionFile = 'config/dependencyCheck/suppressions.xml'
    autoUpdate = true
    cveValidForHours = 1
    formats = ['HTML', 'JUNIT', 'XML']
    outputDirectory = "${buildDir}/reports/dependencyCheck"
    analyzers {
        nodeAudit {
            yarnEnabled = false
        }
        experimentalEnabled = true
        archiveEnabled = true
        jarEnabled = true
        centralEnabled = true
        nexusEnabled = true
        pyDistributionEnabled = false
        pyPackageEnabled = false
        rubygemsEnabled = false
        opensslEnabled = false
        nuspecEnabled = false
        assemblyEnabled = false
        cmakeEnabled = false
        autoconfEnabled = true
        composerEnabled = false
        nodeEnabled = false
        cocoapodsEnabled = false
        swiftEnabled = false
    }
    cve {
        waitTime = 8000
    }
}

spotbugs {
    toolVersion.set('4.1.4')
    ignoreFailures.set(false)
    showStackTraces.set(true)
    showProgress.set(true)
    maxHeapSize.set('1g')
}

spotbugsMain {
    excludeFilter = file('config/spotbugs/spotbugs-exclude.xml')
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs-main-${project.name}.xml")
        }
    }
}

spotbugsTest {
    excludeFilter = file('config/spotbugs/spotbugs-exclude.xml')
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs-test-${project.name}.xml")
        }
    }
}

asciidoctorj {
    modules {
        diagram.use()
        diagram.version '1.5.16'
    }
    requires 'asciidoctor-diagram/mermaid'
}

asciidoctorPdf {
    baseDirFollowsSourceFile()

    asciidoctorj {
        attributes([
            'build-gradle': file('build.gradle'),
            'sourcedir'   : file("src/docs/asciidoc"),
            'imagesdir'   : './images'
        ])
    }
}

asciidoctor {
    dependsOn('asciidoctorPdf')

    baseDirFollowsSourceFile()

    attributes([
        'build-gradle': file('build.gradle'),
        'sourcedir'   : file("src/docs/asciidoc"),
        'imagesdir'   : 'images'
    ])
}

configurations.all {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.apache.logging.log4j') {
            details.useVersion "${log4j2Version}"
        }
    }
}

configurations {
    compileOnly {
        canBeResolved = true
        extendsFrom annotationProcessor
    }

    all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.apache.logging.log4j') {
                details.useVersion "${log4j2Version}"
            }
        }
    }
}

test {
    testLogging {
        events TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED
    }
    useJUnitPlatform()
    reports.html.required = true
    reports.junitXml.required = true
    finalizedBy jacocoTestReport
    maxHeapSize = '1G'
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    check.dependsOn jacocoTestCoverageVerification
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    dependsOn test
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.login", "sonar-cicd-user"
        property "sonar.password", "sonar-cicd-pass"
        property "sonar.projectName", project.name
        property "sonar.projectKey", project.name
        property "sonar.projectDescription", project.description
        property "sonar.projectVersion", rootProject.version
        property "sonar.junit.reportPaths", "build/test-results/test"
        property 'sonar.exclusions', "**/com/novo/microservices/**/repository/entities/**,**/com/novo/microservices/**/helpers/*ClientSocketUtil*,**/com/novo/microservices/**/helpers/*UtilEncryption*,**/com/novo/microservices/adapters/novotrans/dtos/**,**/com/novo/microservices/constants/**,**/com/novo/microservices/dtos/**"
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.junit:junit-bom:$junitJupiter"
    }
}

dependencies {
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.12.5'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'
    runtimeOnly 'com.h2database:h2'
    implementation (group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1')
    implementation(group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.25')
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.12.3'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.3'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.12.3'
    implementation 'org.springframework:spring-core'
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-validation') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation "org.hibernate.validator:hibernate-validator:6.0.2.Final"
    implementation "org.hibernate.validator:hibernate-validator-annotation-processor:6.0.2.Final"
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    implementation("org.springframework.boot:spring-boot-starter-jetty")
    implementation('org.springframework.boot:spring-boot-starter-log4j2')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('io.micrometer:micrometer-registry-prometheus')
    implementation group: 'org.thingsboard', name: 'springfox-boot-starter', version: "${springfoxVersion}"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation group: 'org.springframework.retry', name: 'spring-retry', version: '1.3.1'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.1.2'
    implementation 'com.jparams:to-string-verifier:1.4.8'
    implementation 'org.projectlombok:lombok:1.18.10'
    implementation 'javax.json.bind:javax.json.bind-api:1.0'
    implementation 'org.eclipse:yasson:1.0'
    implementation 'org.glassfish:javax.json:1.1'
    implementation 'com.github.spotbugs:spotbugs-annotations:4.2.2'
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.1'
    compileOnly('org.projectlombok:lombok')
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor('org.projectlombok:lombok')
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j2Version}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4j2Version}"
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.4.1'
    testImplementation("org.junit.platform:junit-platform-commons:1.8.2")
    testImplementation("org.junit.platform:junit-platform-suite-api:1.8.2")
    testImplementation("org.junit.platform:junit-platform-runner:1.8.2")
    testImplementation(platform("org.junit:junit-bom:${junitJupiter}"))
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitJupiter")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitJupiter")
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.4.1'
    testImplementation 'com.jparams:to-string-verifier:1.4.8'
    testImplementation 'com.h2database:h2'
    testImplementation(group: 'org.mock-server', name: 'mockserver-junit-jupiter', version: '5.11.2') {
        exclude group: 'jakarta.validation', module: 'jakarta.validation-api'
    }
}

task zipRelease(type: Zip) {
    dependsOn check, asciidoctor, bootJar, sourcesJar
    from 'build/'
    include 'docs/**'
    from 'build/libs'
    include '*.jar'
    from 'src/main/resources'
    include '*.xml'
    include '*.yml'
    include '*.sh'
    include 'parametros/**'
    include 'templates/**'
    archiveName "release-${rootProject.version}.zip"
}

task release {
    dependsOn build, zipRelease
    doLast {
        println 'Finish generate release'
    }
}

build.dependsOn check, asciidoctor, zipRelease

bootJar {
    manifest {
        attributes(
            'Implementation-Title': project.description,
            'Implementation-Version': rootProject.version,
            'Built-By': 'microservice',
            'Built-JDK': System.getProperty('java.version'),
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Build-Revision': "${getGitSha()}",
            'Build-Branch': "${getGitBranch()}",
        )

    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
